<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本概念和术语"><a href="#1-基本概念和术语" class="headerlink" title="1.基本概念和术语"></a>1.基本概念和术语</h1><p>程序设计：为计算机处理问题编制一组指令集<br>算法：处理问题的策略<br>数据：所有能被输入到计算机中，且能被计算机处理的符号的集合，是计算机操作的对象的总称，是计算机处理的信息的某种特定的符号表现形式<br>数据元素：数据的基本单位，在计算机中通常作为一个整体进行考虑和处理，一个数据元素可由若干个数据项组成，即使数据的一个个体<br>数据项：是数据结构中讨论的数据最小单位<br>数据对象：性质相同的数据元素的集合，是数据的一个子集</p><hr><h1 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2.数据结构"></a>2.数据结构</h1><ul><li>在数据结构中，数据元素不是孤立存在的，它们存在着某种关系，<strong>数据元素相互之间的关系称为结构</strong></li><li>或者是<strong>相互之间存在一种或者多种特定的关系</strong>的数据元素集合</li><li>亦或者是带结构的数据元素的集合</li></ul><p>数据结构包括以下三个方面的内容</p><ol><li>数据元素之间的逻辑关系，也称为逻辑结构</li><li>数据元素及其关系在计算机内存中的表示（又称之为映像），称为数据结构的<strong>物理结构</strong>或数据的存储结构</li><li>数据的运算和实现，即对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现</li></ol><h2 id="2-1逻辑结构"><a href="#2-1逻辑结构" class="headerlink" title="2.1逻辑结构"></a>2.1逻辑结构</h2><p>数据的四种基本逻辑结构：</p><ul><li>线性结构，有且仅有一个开始和一个终端结点，并且所有的结点都最多只有一个直接前趋和一个直接后继</li><li>树形结构</li><li>图形结构或网状结构</li><li>集合结构<br>数据结构的形式定义为：数据结构是一个二元组<br><strong>Data_Structure = (D，S)</strong></li></ul><h2 id="2-2物理结构"><a href="#2-2物理结构" class="headerlink" title="2.2物理结构"></a>2.2物理结构</h2><p>数据结构在计算机中的表示称为数据的物理结构（存储结构），包括数据元素的表示和关系的表示。在计算机中，我们可以用一个若干位组合起来形成的一位串表示一个数据元素，通常称这个位串为元素或结点。当数据元素由若干数据项组成时，位串中对应于各个数据项的子位串称为数据域，因此，元素或结点可看成是数据元素在计算机中的映像。</p><p>物理结构有四种基本的存储结构</p><ul><li>顺序存储结构：用一组连续的存储单元依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示</li><li>链式存储结构：用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示</li><li>索引存储结构：在存储节点信息的同时，还建立附加的索引表</li><li>散列存储结构：根据结点的关键字直接计算出该结点的存储地址</li></ul><h2 id="2-3抽象数据类型"><a href="#2-3抽象数据类型" class="headerlink" title="2.3抽象数据类型"></a>2.3抽象数据类型</h2><p>抽象数据类型(Abstract Data Type，ADT):是指一个数据模型以及定义在此数学模型上的一组操作</p><ul><li>由用户定义，从问题抽象出数据模型(逻辑结构)</li><li>还包括定义在数据模型上的一组抽象运算(相关操作)</li><li>不考虑计算机内的具体存储结构与运算的具体实现算法</li></ul><p><strong>形式定义</strong><br>抽象数据类型可用(D,S,P)三元组表示</p><ul><li>D是数据对象</li><li>S是D上的关系集</li><li>P是对D的基本操作集</li></ul><p><strong>定义格式</strong><br>ADT 抽象数据类型{</p><p>数据对象:&lt;数据对象的定义&gt;<br>数据关系:&lt;数据关系的定义&gt;<br>基本操作:&lt;基本操作的定义&gt;</p><p>} ADT 抽象数据类型<br>注：</p><ul><li>数据对象、数据关系的定义用伪代码描述</li><li>基本操作的定义格式为：<ul><li>基本操作名（参数表）</li><li>初始条件:&lt;初始条件描述&gt;</li><li>操作结果:&lt;操作结果描述&gt;</li></ul></li></ul><p>小结<br><img src="https://dreamsheep.oss-cn-chengdu.aliyuncs.com/img/202309171430744.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法和算法分析</title>
      <link href="/2023/10/01/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>/2023/10/01/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="算法和算法分析"><a href="#算法和算法分析" class="headerlink" title="算法和算法分析"></a>算法和算法分析</h1><h2 id="1-算法"><a href="#1-算法" class="headerlink" title="1.算法"></a>1.算法</h2><p><strong>定义：</strong></p><ul><li>对特定问题<strong>求解方法和步骤</strong>的一种描述，它是<strong>指令</strong>的有限序列，每个指令表示一个或多个操作，简而言之，算法就是<strong>解决问题的方法和步骤</strong></li></ul><p><strong>描述：</strong></p><ul><li>自然语言：英文，中文</li><li>流程图：传统流程图，NS流程图</li><li>伪代码：类语言：类C语言</li><li>程序代码：C，Java</li></ul><p><strong>算法与程序</strong></p><ul><li><strong>算法</strong>是解决问题的一种方法或者过程，考虑如何将输入转化为输出，一个问题可以有多种算法</li><li><strong>程序</strong>是某种程序设计语言对算法的具体实现<br>即：</li><li>数据结构通过算法实现操作</li><li>算法根据数据结构设计程序</li></ul><p><strong>特性：</strong></p><ol><li>有穷性：一个算法必须总是在执行有穷步之后结束，且每一步都在有穷时间内完成</li><li>确定性：算法中的每一条指令必须有确切的含义，没有二义性，在任何条件下，只有唯一的一条执行路径，即对于相同的输入只能得到相同的输出。</li><li>可行性：算法是可执行的，算法描述的操作可以通过已经实现的基本操作执行有限次来实现</li><li>输入：一个算法有零个或多个输入</li><li>输入：一个算法有零个或多个输出</li></ol><h2 id="2-设计的要求"><a href="#2-设计的要求" class="headerlink" title="2.设计的要求"></a>2.设计的要求</h2><ul><li>可读性<ol><li>算法主要是为了人的阅读和交流，其次才是为计算机执行，因此算法应该易于人的理解</li><li>另一方面，晦涩难懂的算法易于隐藏较多错误而难以调试</li></ol></li><li>正确性<ul><li>算法满足问题要求，能正确解决问题</li><li>但算法转化为程序后注意：<ol><li>程序中不含语法错误</li><li>程序对于几组输入数据能够得出满足要求的结果</li><li>程序对于精心选择的、经典、苛刻且带有刁难性的几组输入数据能够得出满足需求的结果</li><li>程序对于<strong>一切合法的输入数据</strong>都能得出满足要求得结果</li></ol></li></ul></li><li>健壮性<ul><li>指当输入<strong>非法数据</strong>时，算法恰当地做出反应或进行相应地处理，而不是产生莫名其妙地输出结果</li><li>处理出错的方法，不应是中断程序的执行，而应是返回一个表示错误或错误性质的值，以便在更高抽象层面进行处理</li></ul></li><li>高效性：要去花费尽量少的时间和尽量低的存储要求</li></ul><h2 id="3-算法的优劣判断"><a href="#3-算法的优劣判断" class="headerlink" title="3.算法的优劣判断"></a>3.算法的优劣判断</h2><blockquote><p>通过算法的效率高低来评判不同算法的优劣程度</p></blockquote><p>算法效率一般通过以下两方面来考虑</p><ol><li>时间效率：指的是算法所耗费的时间</li><li>空间效率：指的是算法执行过程中所耗费的存储空间</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
